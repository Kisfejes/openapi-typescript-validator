// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`custom-schema decoders should match 1`] = `
"/* eslint-disable */
/* tslint-disable */
import { ErrorObject } from \\"ajv\\";
import * as types from \\"./custom-models\\";
import {
  ScreenValidator,
  TitleComponentValidator,
  ImageComponentValidator,
  MetaValidator,
} from \\"./custom-validators\\";

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!! AUTO GENERATED CODE, DON'T TOUCH !!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

interface Validator {
  (json: unknown): boolean;
  errors?: ErrorObject[];
}

function validateJson(
  json: any,
  validator: Validator,
  definitionName: string
): any {
  const jsonObject = typeof json === \\"string\\" ? JSON.parse(json) : json;

  if (validator(jsonObject)) {
    return jsonObject;
  }

  const jsonPreviewStr = (typeof json === \\"string\\"
    ? json
    : JSON.stringify(jsonObject)
  ).substring(0, 200);
  if (validator.errors) {
    throw Error(
      \`\${definitionName} \${errorsText(
        validator.errors
      )}. JSON: \${jsonPreviewStr}\`
    );
  }

  throw Error(
    \`\${definitionName} Unexpected data received. JSON: \${jsonPreviewStr}\`
  );
}

function errorsText(errors: ErrorObject[]): string {
  return errors
    .map((error) => \`\${error.instancePath}: \${error.message}\`)
    .join(\\"\\\\n\\");
}

// Decoders
export const ScreenDecoder = {
  definitionName: \\"Screen\\",
  schemaRef: \\"#/definitions/Screen\\",

  decode(json: any): types.Screen {
    return validateJson(
      json,
      ScreenValidator as Validator,
      ScreenDecoder.definitionName
    );
  },
};
export const TitleComponentDecoder = {
  definitionName: \\"TitleComponent\\",
  schemaRef: \\"#/definitions/TitleComponent\\",

  decode(json: any): types.TitleComponent {
    return validateJson(
      json,
      TitleComponentValidator as Validator,
      TitleComponentDecoder.definitionName
    );
  },
};
export const ImageComponentDecoder = {
  definitionName: \\"ImageComponent\\",
  schemaRef: \\"#/definitions/ImageComponent\\",

  decode(json: any): types.ImageComponent {
    return validateJson(
      json,
      ImageComponentValidator as Validator,
      ImageComponentDecoder.definitionName
    );
  },
};
export const MetaDecoder = {
  definitionName: \\"Meta\\",
  schemaRef: \\"#/definitions/Meta\\",

  decode(json: any): types.Meta {
    return validateJson(
      json,
      MetaValidator as Validator,
      MetaDecoder.definitionName
    );
  },
};
"
`;

exports[`custom-schema models should match 1`] = `
"/* eslint-disable */

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Component = TitleComponent | ImageComponent;

export interface Screen {
  components: Component[];
}
export interface TitleComponent {
  type: \\"title\\";
  title: string;
  subtitle?: string | null;
  meta: Meta;
}
export interface Meta {
  dateTime: string;
}
export interface ImageComponent {
  type: \\"image\\";
  url: string;
  meta: Meta;
}
"
`;

exports[`custom-schema schema should match 1`] = `
"{
  \\"type\\": \\"object\\",
  \\"title\\": \\"Schema\\",
  \\"definitions\\": {
    \\"Screen\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"components\\": {
          \\"type\\": \\"array\\",
          \\"items\\": {
            \\"$ref\\": \\"#/definitions/Component\\"
          }
        }
      },
      \\"required\\": [
        \\"components\\"
      ]
    },
    \\"Component\\": {
      \\"anyOf\\": [
        {
          \\"$ref\\": \\"#/definitions/TitleComponent\\"
        },
        {
          \\"$ref\\": \\"#/definitions/ImageComponent\\"
        }
      ]
    },
    \\"TitleComponent\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"type\\": {
          \\"type\\": \\"string\\",
          \\"enum\\": [
            \\"title\\"
          ]
        },
        \\"title\\": {
          \\"type\\": \\"string\\"
        },
        \\"subtitle\\": {
          \\"type\\": [
            \\"string\\",
            \\"null\\"
          ]
        },
        \\"meta\\": {
          \\"$ref\\": \\"#/definitions/Meta\\"
        }
      },
      \\"required\\": [
        \\"type\\",
        \\"title\\",
        \\"meta\\"
      ]
    },
    \\"ImageComponent\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"type\\": {
          \\"type\\": \\"string\\",
          \\"enum\\": [
            \\"image\\"
          ]
        },
        \\"url\\": {
          \\"type\\": \\"string\\"
        },
        \\"meta\\": {
          \\"$ref\\": \\"#/definitions/Meta\\"
        }
      },
      \\"required\\": [
        \\"type\\",
        \\"url\\",
        \\"meta\\"
      ]
    },
    \\"Meta\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"dateTime\\": {
          \\"type\\": \\"string\\"
        }
      },
      \\"required\\": [
        \\"dateTime\\"
      ]
    }
  },
  \\"properties\\": {
    \\"Screen\\": {
      \\"$ref\\": \\"#/definitions/Screen\\"
    },
    \\"Component\\": {
      \\"$ref\\": \\"#/definitions/Component\\"
    },
    \\"TitleComponent\\": {
      \\"$ref\\": \\"#/definitions/TitleComponent\\"
    },
    \\"ImageComponent\\": {
      \\"$ref\\": \\"#/definitions/ImageComponent\\"
    },
    \\"Meta\\": {
      \\"$ref\\": \\"#/definitions/Meta\\"
    }
  }
}"
`;

exports[`custom-schema validators.d.ts should match 1`] = `
"export function ScreenValidator(json: unknown): boolean;
export function TitleComponentValidator(json: unknown): boolean;
export function ImageComponentValidator(json: unknown): boolean;
export function MetaValidator(json: unknown): boolean;
"
`;

exports[`custom-schema validators.js should match 1`] = `
"
/* eslint-disable */

\\"use strict\\";export const ScreenValidator = validate22;const schema12 = {\\"type\\":\\"object\\",\\"properties\\":{\\"components\\":{\\"type\\":\\"array\\",\\"items\\":{\\"$ref\\":\\"#/definitions/Component\\"}}},\\"required\\":[\\"components\\"]};const schema13 = {\\"anyOf\\":[{\\"$ref\\":\\"#/definitions/TitleComponent\\"},{\\"$ref\\":\\"#/definitions/ImageComponent\\"}]};const schema14 = {\\"type\\":\\"object\\",\\"properties\\":{\\"type\\":{\\"type\\":\\"string\\",\\"enum\\":[\\"title\\"]},\\"title\\":{\\"type\\":\\"string\\"},\\"subtitle\\":{\\"type\\":[\\"string\\",\\"null\\"]},\\"meta\\":{\\"$ref\\":\\"#/definitions/Meta\\"}},\\"required\\":[\\"type\\",\\"title\\",\\"meta\\"]};const schema15 = {\\"type\\":\\"object\\",\\"properties\\":{\\"dateTime\\":{\\"type\\":\\"string\\"}},\\"required\\":[\\"dateTime\\"]};const func0 = require(\\"ajv/dist/runtime/equal\\").default;function validate13(data, {instancePath=\\"\\", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == \\"object\\" && !Array.isArray(data)){let missing0;if((((data.type === undefined) && (missing0 = \\"type\\")) || ((data.title === undefined) && (missing0 = \\"title\\"))) || ((data.meta === undefined) && (missing0 = \\"meta\\"))){validate13.errors = [{instancePath,schemaPath:\\"#/required\\",keyword:\\"required\\",params:{missingProperty: missing0},message:\\"must have required property '\\"+missing0+\\"'\\"}];return false;}else {if(data.type !== undefined){let data0 = data.type;const _errs1 = errors;if(typeof data0 !== \\"string\\"){validate13.errors = [{instancePath:instancePath+\\"/type\\",schemaPath:\\"#/properties/type/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}if(!(data0 === \\"title\\")){validate13.errors = [{instancePath:instancePath+\\"/type\\",schemaPath:\\"#/properties/type/enum\\",keyword:\\"enum\\",params:{allowedValues: schema14.properties.type.enum},message:\\"must be equal to one of the allowed values\\"}];return false;}var valid0 = _errs1 === errors;}else {var valid0 = true;}if(valid0){if(data.title !== undefined){const _errs3 = errors;if(typeof data.title !== \\"string\\"){validate13.errors = [{instancePath:instancePath+\\"/title\\",schemaPath:\\"#/properties/title/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}var valid0 = _errs3 === errors;}else {var valid0 = true;}if(valid0){if(data.subtitle !== undefined){let data2 = data.subtitle;const _errs5 = errors;if((typeof data2 !== \\"string\\") && (data2 !== null)){validate13.errors = [{instancePath:instancePath+\\"/subtitle\\",schemaPath:\\"#/properties/subtitle/type\\",keyword:\\"type\\",params:{type: schema14.properties.subtitle.type},message:\\"must be string,null\\"}];return false;}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.meta !== undefined){let data3 = data.meta;const _errs7 = errors;const _errs8 = errors;if(errors === _errs8){if(data3 && typeof data3 == \\"object\\" && !Array.isArray(data3)){let missing1;if((data3.dateTime === undefined) && (missing1 = \\"dateTime\\")){validate13.errors = [{instancePath:instancePath+\\"/meta\\",schemaPath:\\"#/definitions/Meta/required\\",keyword:\\"required\\",params:{missingProperty: missing1},message:\\"must have required property '\\"+missing1+\\"'\\"}];return false;}else {if(data3.dateTime !== undefined){if(typeof data3.dateTime !== \\"string\\"){validate13.errors = [{instancePath:instancePath+\\"/meta/dateTime\\",schemaPath:\\"#/definitions/Meta/properties/dateTime/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}}}}else {validate13.errors = [{instancePath:instancePath+\\"/meta\\",schemaPath:\\"#/definitions/Meta/type\\",keyword:\\"type\\",params:{type: \\"object\\"},message:\\"must be object\\"}];return false;}}var valid0 = _errs7 === errors;}else {var valid0 = true;}}}}}}else {validate13.errors = [{instancePath,schemaPath:\\"#/type\\",keyword:\\"type\\",params:{type: \\"object\\"},message:\\"must be object\\"}];return false;}}validate13.errors = vErrors;return errors === 0;}const schema16 = {\\"type\\":\\"object\\",\\"properties\\":{\\"type\\":{\\"type\\":\\"string\\",\\"enum\\":[\\"image\\"]},\\"url\\":{\\"type\\":\\"string\\"},\\"meta\\":{\\"$ref\\":\\"#/definitions/Meta\\"}},\\"required\\":[\\"type\\",\\"url\\",\\"meta\\"]};function validate15(data, {instancePath=\\"\\", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == \\"object\\" && !Array.isArray(data)){let missing0;if((((data.type === undefined) && (missing0 = \\"type\\")) || ((data.url === undefined) && (missing0 = \\"url\\"))) || ((data.meta === undefined) && (missing0 = \\"meta\\"))){validate15.errors = [{instancePath,schemaPath:\\"#/required\\",keyword:\\"required\\",params:{missingProperty: missing0},message:\\"must have required property '\\"+missing0+\\"'\\"}];return false;}else {if(data.type !== undefined){let data0 = data.type;const _errs1 = errors;if(typeof data0 !== \\"string\\"){validate15.errors = [{instancePath:instancePath+\\"/type\\",schemaPath:\\"#/properties/type/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}if(!(data0 === \\"image\\")){validate15.errors = [{instancePath:instancePath+\\"/type\\",schemaPath:\\"#/properties/type/enum\\",keyword:\\"enum\\",params:{allowedValues: schema16.properties.type.enum},message:\\"must be equal to one of the allowed values\\"}];return false;}var valid0 = _errs1 === errors;}else {var valid0 = true;}if(valid0){if(data.url !== undefined){const _errs3 = errors;if(typeof data.url !== \\"string\\"){validate15.errors = [{instancePath:instancePath+\\"/url\\",schemaPath:\\"#/properties/url/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}var valid0 = _errs3 === errors;}else {var valid0 = true;}if(valid0){if(data.meta !== undefined){let data2 = data.meta;const _errs5 = errors;const _errs6 = errors;if(errors === _errs6){if(data2 && typeof data2 == \\"object\\" && !Array.isArray(data2)){let missing1;if((data2.dateTime === undefined) && (missing1 = \\"dateTime\\")){validate15.errors = [{instancePath:instancePath+\\"/meta\\",schemaPath:\\"#/definitions/Meta/required\\",keyword:\\"required\\",params:{missingProperty: missing1},message:\\"must have required property '\\"+missing1+\\"'\\"}];return false;}else {if(data2.dateTime !== undefined){if(typeof data2.dateTime !== \\"string\\"){validate15.errors = [{instancePath:instancePath+\\"/meta/dateTime\\",schemaPath:\\"#/definitions/Meta/properties/dateTime/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}}}}else {validate15.errors = [{instancePath:instancePath+\\"/meta\\",schemaPath:\\"#/definitions/Meta/type\\",keyword:\\"type\\",params:{type: \\"object\\"},message:\\"must be object\\"}];return false;}}var valid0 = _errs5 === errors;}else {var valid0 = true;}}}}}else {validate15.errors = [{instancePath,schemaPath:\\"#/type\\",keyword:\\"type\\",params:{type: \\"object\\"},message:\\"must be object\\"}];return false;}}validate15.errors = vErrors;return errors === 0;}function validate12(data, {instancePath=\\"\\", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;const _errs0 = errors;let valid0 = false;const _errs1 = errors;if(!(validate13(data, {instancePath,parentData,parentDataProperty,rootData}))){vErrors = vErrors === null ? validate13.errors : vErrors.concat(validate13.errors);errors = vErrors.length;}var _valid0 = _errs1 === errors;valid0 = valid0 || _valid0;if(!valid0){const _errs2 = errors;if(!(validate15(data, {instancePath,parentData,parentDataProperty,rootData}))){vErrors = vErrors === null ? validate15.errors : vErrors.concat(validate15.errors);errors = vErrors.length;}var _valid0 = _errs2 === errors;valid0 = valid0 || _valid0;}if(!valid0){const err0 = {instancePath,schemaPath:\\"#/anyOf\\",keyword:\\"anyOf\\",params:{},message:\\"must match a schema in anyOf\\"};if(vErrors === null){vErrors = [err0];}else {vErrors.push(err0);}errors++;validate12.errors = vErrors;return false;}else {errors = _errs0;if(vErrors !== null){if(_errs0){vErrors.length = _errs0;}else {vErrors = null;}}}validate12.errors = vErrors;return errors === 0;}function validate22(data, {instancePath=\\"\\", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == \\"object\\" && !Array.isArray(data)){let missing0;if((data.components === undefined) && (missing0 = \\"components\\")){validate22.errors = [{instancePath,schemaPath:\\"#/required\\",keyword:\\"required\\",params:{missingProperty: missing0},message:\\"must have required property '\\"+missing0+\\"'\\"}];return false;}else {if(data.components !== undefined){let data0 = data.components;const _errs1 = errors;if(errors === _errs1){if(Array.isArray(data0)){var valid1 = true;const len0 = data0.length;for(let i0=0; i0<len0; i0++){const _errs3 = errors;if(!(validate12(data0[i0], {instancePath:instancePath+\\"/components/\\" + i0,parentData:data0,parentDataProperty:i0,rootData}))){vErrors = vErrors === null ? validate12.errors : vErrors.concat(validate12.errors);errors = vErrors.length;}var valid1 = _errs3 === errors;if(!valid1){break;}}}else {validate22.errors = [{instancePath:instancePath+\\"/components\\",schemaPath:\\"#/properties/components/type\\",keyword:\\"type\\",params:{type: \\"array\\"},message:\\"must be array\\"}];return false;}}}}}else {validate22.errors = [{instancePath,schemaPath:\\"#/type\\",keyword:\\"type\\",params:{type: \\"object\\"},message:\\"must be object\\"}];return false;}}validate22.errors = vErrors;return errors === 0;}export const TitleComponentValidator = validate24;function validate24(data, {instancePath=\\"\\", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == \\"object\\" && !Array.isArray(data)){let missing0;if((((data.type === undefined) && (missing0 = \\"type\\")) || ((data.title === undefined) && (missing0 = \\"title\\"))) || ((data.meta === undefined) && (missing0 = \\"meta\\"))){validate24.errors = [{instancePath,schemaPath:\\"#/required\\",keyword:\\"required\\",params:{missingProperty: missing0},message:\\"must have required property '\\"+missing0+\\"'\\"}];return false;}else {if(data.type !== undefined){let data0 = data.type;const _errs1 = errors;if(typeof data0 !== \\"string\\"){validate24.errors = [{instancePath:instancePath+\\"/type\\",schemaPath:\\"#/properties/type/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}if(!(data0 === \\"title\\")){validate24.errors = [{instancePath:instancePath+\\"/type\\",schemaPath:\\"#/properties/type/enum\\",keyword:\\"enum\\",params:{allowedValues: schema14.properties.type.enum},message:\\"must be equal to one of the allowed values\\"}];return false;}var valid0 = _errs1 === errors;}else {var valid0 = true;}if(valid0){if(data.title !== undefined){const _errs3 = errors;if(typeof data.title !== \\"string\\"){validate24.errors = [{instancePath:instancePath+\\"/title\\",schemaPath:\\"#/properties/title/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}var valid0 = _errs3 === errors;}else {var valid0 = true;}if(valid0){if(data.subtitle !== undefined){let data2 = data.subtitle;const _errs5 = errors;if((typeof data2 !== \\"string\\") && (data2 !== null)){validate24.errors = [{instancePath:instancePath+\\"/subtitle\\",schemaPath:\\"#/properties/subtitle/type\\",keyword:\\"type\\",params:{type: schema14.properties.subtitle.type},message:\\"must be string,null\\"}];return false;}var valid0 = _errs5 === errors;}else {var valid0 = true;}if(valid0){if(data.meta !== undefined){let data3 = data.meta;const _errs7 = errors;const _errs8 = errors;if(errors === _errs8){if(data3 && typeof data3 == \\"object\\" && !Array.isArray(data3)){let missing1;if((data3.dateTime === undefined) && (missing1 = \\"dateTime\\")){validate24.errors = [{instancePath:instancePath+\\"/meta\\",schemaPath:\\"#/definitions/Meta/required\\",keyword:\\"required\\",params:{missingProperty: missing1},message:\\"must have required property '\\"+missing1+\\"'\\"}];return false;}else {if(data3.dateTime !== undefined){if(typeof data3.dateTime !== \\"string\\"){validate24.errors = [{instancePath:instancePath+\\"/meta/dateTime\\",schemaPath:\\"#/definitions/Meta/properties/dateTime/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}}}}else {validate24.errors = [{instancePath:instancePath+\\"/meta\\",schemaPath:\\"#/definitions/Meta/type\\",keyword:\\"type\\",params:{type: \\"object\\"},message:\\"must be object\\"}];return false;}}var valid0 = _errs7 === errors;}else {var valid0 = true;}}}}}}else {validate24.errors = [{instancePath,schemaPath:\\"#/type\\",keyword:\\"type\\",params:{type: \\"object\\"},message:\\"must be object\\"}];return false;}}validate24.errors = vErrors;return errors === 0;}export const ImageComponentValidator = validate25;function validate25(data, {instancePath=\\"\\", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == \\"object\\" && !Array.isArray(data)){let missing0;if((((data.type === undefined) && (missing0 = \\"type\\")) || ((data.url === undefined) && (missing0 = \\"url\\"))) || ((data.meta === undefined) && (missing0 = \\"meta\\"))){validate25.errors = [{instancePath,schemaPath:\\"#/required\\",keyword:\\"required\\",params:{missingProperty: missing0},message:\\"must have required property '\\"+missing0+\\"'\\"}];return false;}else {if(data.type !== undefined){let data0 = data.type;const _errs1 = errors;if(typeof data0 !== \\"string\\"){validate25.errors = [{instancePath:instancePath+\\"/type\\",schemaPath:\\"#/properties/type/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}if(!(data0 === \\"image\\")){validate25.errors = [{instancePath:instancePath+\\"/type\\",schemaPath:\\"#/properties/type/enum\\",keyword:\\"enum\\",params:{allowedValues: schema16.properties.type.enum},message:\\"must be equal to one of the allowed values\\"}];return false;}var valid0 = _errs1 === errors;}else {var valid0 = true;}if(valid0){if(data.url !== undefined){const _errs3 = errors;if(typeof data.url !== \\"string\\"){validate25.errors = [{instancePath:instancePath+\\"/url\\",schemaPath:\\"#/properties/url/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}var valid0 = _errs3 === errors;}else {var valid0 = true;}if(valid0){if(data.meta !== undefined){let data2 = data.meta;const _errs5 = errors;const _errs6 = errors;if(errors === _errs6){if(data2 && typeof data2 == \\"object\\" && !Array.isArray(data2)){let missing1;if((data2.dateTime === undefined) && (missing1 = \\"dateTime\\")){validate25.errors = [{instancePath:instancePath+\\"/meta\\",schemaPath:\\"#/definitions/Meta/required\\",keyword:\\"required\\",params:{missingProperty: missing1},message:\\"must have required property '\\"+missing1+\\"'\\"}];return false;}else {if(data2.dateTime !== undefined){if(typeof data2.dateTime !== \\"string\\"){validate25.errors = [{instancePath:instancePath+\\"/meta/dateTime\\",schemaPath:\\"#/definitions/Meta/properties/dateTime/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}}}}else {validate25.errors = [{instancePath:instancePath+\\"/meta\\",schemaPath:\\"#/definitions/Meta/type\\",keyword:\\"type\\",params:{type: \\"object\\"},message:\\"must be object\\"}];return false;}}var valid0 = _errs5 === errors;}else {var valid0 = true;}}}}}else {validate25.errors = [{instancePath,schemaPath:\\"#/type\\",keyword:\\"type\\",params:{type: \\"object\\"},message:\\"must be object\\"}];return false;}}validate25.errors = vErrors;return errors === 0;}export const MetaValidator = validate26;function validate26(data, {instancePath=\\"\\", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == \\"object\\" && !Array.isArray(data)){let missing0;if((data.dateTime === undefined) && (missing0 = \\"dateTime\\")){validate26.errors = [{instancePath,schemaPath:\\"#/required\\",keyword:\\"required\\",params:{missingProperty: missing0},message:\\"must have required property '\\"+missing0+\\"'\\"}];return false;}else {if(data.dateTime !== undefined){if(typeof data.dateTime !== \\"string\\"){validate26.errors = [{instancePath:instancePath+\\"/dateTime\\",schemaPath:\\"#/properties/dateTime/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}}}}else {validate26.errors = [{instancePath,schemaPath:\\"#/type\\",keyword:\\"type\\",params:{type: \\"object\\"},message:\\"must be object\\"}];return false;}}validate26.errors = vErrors;return errors === 0;}
"
`;
