// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`compose-schema decoders should match 1`] = `
"/* eslint-disable */
/* tslint-disable */
import { ErrorObject } from \\"ajv\\";
import * as types from \\"./compose-models\\";
import {
  BaseComponentValidator,
  FooComponentValidator,
  BarComponentValidator,
} from \\"./compose-validators\\";

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// !!! AUTO GENERATED CODE, DON'T TOUCH !!!
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

interface Validator {
  (json: unknown): boolean;
  errors?: ErrorObject[];
}

function validateJson(
  json: any,
  validator: Validator,
  definitionName: string
): any {
  const jsonObject = typeof json === \\"string\\" ? JSON.parse(json) : json;

  if (validator(jsonObject)) {
    return jsonObject;
  }

  const jsonPreviewStr = (typeof json === \\"string\\"
    ? json
    : JSON.stringify(jsonObject)
  ).substring(0, 200);
  if (validator.errors) {
    throw Error(
      \`\${definitionName} \${errorsText(
        validator.errors
      )}. JSON: \${jsonPreviewStr}\`
    );
  }

  throw Error(
    \`\${definitionName} Unexpected data received. JSON: \${jsonPreviewStr}\`
  );
}

function errorsText(errors: ErrorObject[]): string {
  return errors
    .map((error) => \`\${error.instancePath}: \${error.message}\`)
    .join(\\"\\\\n\\");
}

// Decoders
export const BaseComponentDecoder = {
  definitionName: \\"BaseComponent\\",
  schemaRef: \\"#/definitions/BaseComponent\\",

  decode(json: any): types.BaseComponent {
    return validateJson(
      json,
      BaseComponentValidator as Validator,
      BaseComponentDecoder.definitionName
    );
  },
};
export const FooComponentDecoder = {
  definitionName: \\"FooComponent\\",
  schemaRef: \\"#/definitions/FooComponent\\",

  decode(json: any): types.FooComponent {
    return validateJson(
      json,
      FooComponentValidator as Validator,
      FooComponentDecoder.definitionName
    );
  },
};
export const BarComponentDecoder = {
  definitionName: \\"BarComponent\\",
  schemaRef: \\"#/definitions/BarComponent\\",

  decode(json: any): types.BarComponent {
    return validateJson(
      json,
      BarComponentValidator as Validator,
      BarComponentDecoder.definitionName
    );
  },
};
"
`;

exports[`compose-schema models should match 1`] = `
"/* eslint-disable */

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type AnyComponent = BarComponent | FooComponent;

export interface BaseComponent {
  id: string;
}
export interface FooComponent {
  id: string;
  type: \\"foo\\";
  tag?: number | null;
}
export interface BarComponent {
  id: string;
  type: \\"bar\\";
  name: string;
}
"
`;

exports[`compose-schema schema should match 1`] = `
"{
  \\"type\\": \\"object\\",
  \\"title\\": \\"Schema\\",
  \\"definitions\\": {
    \\"BaseComponent\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"id\\": {
          \\"type\\": \\"string\\"
        }
      },
      \\"required\\": [
        \\"id\\"
      ]
    },
    \\"FooComponent\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"id\\": {
          \\"type\\": \\"string\\"
        },
        \\"type\\": {
          \\"type\\": \\"string\\",
          \\"enum\\": [
            \\"foo\\"
          ]
        },
        \\"tag\\": {
          \\"type\\": [
            \\"number\\",
            \\"null\\"
          ]
        }
      },
      \\"required\\": [
        \\"id\\",
        \\"type\\"
      ]
    },
    \\"BarComponent\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"id\\": {
          \\"type\\": \\"string\\"
        },
        \\"type\\": {
          \\"type\\": \\"string\\",
          \\"enum\\": [
            \\"bar\\"
          ]
        },
        \\"name\\": {
          \\"type\\": \\"string\\"
        }
      },
      \\"required\\": [
        \\"id\\",
        \\"type\\",
        \\"name\\"
      ]
    },
    \\"AnyComponent\\": {
      \\"anyOf\\": [
        {
          \\"$ref\\": \\"#/definitions/BarComponent\\"
        },
        {
          \\"$ref\\": \\"#/definitions/FooComponent\\"
        }
      ]
    }
  },
  \\"properties\\": {
    \\"BaseComponent\\": {
      \\"$ref\\": \\"#/definitions/BaseComponent\\"
    },
    \\"FooComponent\\": {
      \\"$ref\\": \\"#/definitions/FooComponent\\"
    },
    \\"BarComponent\\": {
      \\"$ref\\": \\"#/definitions/BarComponent\\"
    },
    \\"AnyComponent\\": {
      \\"$ref\\": \\"#/definitions/AnyComponent\\"
    }
  }
}"
`;

exports[`compose-schema validators.d.ts should match 1`] = `
"export function BaseComponentValidator(json: unknown): boolean;
export function FooComponentValidator(json: unknown): boolean;
export function BarComponentValidator(json: unknown): boolean;
"
`;

exports[`compose-schema validators.js should match 1`] = `
"
/* eslint-disable */

\\"use strict\\";export const BaseComponentValidator = validate13;const schema12 = {\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\"}},\\"required\\":[\\"id\\"]};function validate13(data, {instancePath=\\"\\", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == \\"object\\" && !Array.isArray(data)){let missing0;if((data.id === undefined) && (missing0 = \\"id\\")){validate13.errors = [{instancePath,schemaPath:\\"#/required\\",keyword:\\"required\\",params:{missingProperty: missing0},message:\\"must have required property '\\"+missing0+\\"'\\"}];return false;}else {if(data.id !== undefined){if(typeof data.id !== \\"string\\"){validate13.errors = [{instancePath:instancePath+\\"/id\\",schemaPath:\\"#/properties/id/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}}}}else {validate13.errors = [{instancePath,schemaPath:\\"#/type\\",keyword:\\"type\\",params:{type: \\"object\\"},message:\\"must be object\\"}];return false;}}validate13.errors = vErrors;return errors === 0;}export const FooComponentValidator = validate14;const schema13 = {\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\"},\\"type\\":{\\"type\\":\\"string\\",\\"enum\\":[\\"foo\\"]},\\"tag\\":{\\"type\\":[\\"number\\",\\"null\\"]}},\\"required\\":[\\"id\\",\\"type\\"]};const func0 = require(\\"ajv/dist/runtime/equal\\").default;function validate14(data, {instancePath=\\"\\", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == \\"object\\" && !Array.isArray(data)){let missing0;if(((data.id === undefined) && (missing0 = \\"id\\")) || ((data.type === undefined) && (missing0 = \\"type\\"))){validate14.errors = [{instancePath,schemaPath:\\"#/required\\",keyword:\\"required\\",params:{missingProperty: missing0},message:\\"must have required property '\\"+missing0+\\"'\\"}];return false;}else {if(data.id !== undefined){const _errs1 = errors;if(typeof data.id !== \\"string\\"){validate14.errors = [{instancePath:instancePath+\\"/id\\",schemaPath:\\"#/properties/id/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}var valid0 = _errs1 === errors;}else {var valid0 = true;}if(valid0){if(data.type !== undefined){let data1 = data.type;const _errs3 = errors;if(typeof data1 !== \\"string\\"){validate14.errors = [{instancePath:instancePath+\\"/type\\",schemaPath:\\"#/properties/type/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}if(!(data1 === \\"foo\\")){validate14.errors = [{instancePath:instancePath+\\"/type\\",schemaPath:\\"#/properties/type/enum\\",keyword:\\"enum\\",params:{allowedValues: schema13.properties.type.enum},message:\\"must be equal to one of the allowed values\\"}];return false;}var valid0 = _errs3 === errors;}else {var valid0 = true;}if(valid0){if(data.tag !== undefined){let data2 = data.tag;const _errs5 = errors;if((!(typeof data2 == \\"number\\")) && (data2 !== null)){validate14.errors = [{instancePath:instancePath+\\"/tag\\",schemaPath:\\"#/properties/tag/type\\",keyword:\\"type\\",params:{type: schema13.properties.tag.type},message:\\"must be number,null\\"}];return false;}var valid0 = _errs5 === errors;}else {var valid0 = true;}}}}}else {validate14.errors = [{instancePath,schemaPath:\\"#/type\\",keyword:\\"type\\",params:{type: \\"object\\"},message:\\"must be object\\"}];return false;}}validate14.errors = vErrors;return errors === 0;}export const BarComponentValidator = validate15;const schema14 = {\\"type\\":\\"object\\",\\"properties\\":{\\"id\\":{\\"type\\":\\"string\\"},\\"type\\":{\\"type\\":\\"string\\",\\"enum\\":[\\"bar\\"]},\\"name\\":{\\"type\\":\\"string\\"}},\\"required\\":[\\"id\\",\\"type\\",\\"name\\"]};function validate15(data, {instancePath=\\"\\", parentData, parentDataProperty, rootData=data}={}){let vErrors = null;let errors = 0;if(errors === 0){if(data && typeof data == \\"object\\" && !Array.isArray(data)){let missing0;if((((data.id === undefined) && (missing0 = \\"id\\")) || ((data.type === undefined) && (missing0 = \\"type\\"))) || ((data.name === undefined) && (missing0 = \\"name\\"))){validate15.errors = [{instancePath,schemaPath:\\"#/required\\",keyword:\\"required\\",params:{missingProperty: missing0},message:\\"must have required property '\\"+missing0+\\"'\\"}];return false;}else {if(data.id !== undefined){const _errs1 = errors;if(typeof data.id !== \\"string\\"){validate15.errors = [{instancePath:instancePath+\\"/id\\",schemaPath:\\"#/properties/id/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}var valid0 = _errs1 === errors;}else {var valid0 = true;}if(valid0){if(data.type !== undefined){let data1 = data.type;const _errs3 = errors;if(typeof data1 !== \\"string\\"){validate15.errors = [{instancePath:instancePath+\\"/type\\",schemaPath:\\"#/properties/type/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}if(!(data1 === \\"bar\\")){validate15.errors = [{instancePath:instancePath+\\"/type\\",schemaPath:\\"#/properties/type/enum\\",keyword:\\"enum\\",params:{allowedValues: schema14.properties.type.enum},message:\\"must be equal to one of the allowed values\\"}];return false;}var valid0 = _errs3 === errors;}else {var valid0 = true;}if(valid0){if(data.name !== undefined){const _errs5 = errors;if(typeof data.name !== \\"string\\"){validate15.errors = [{instancePath:instancePath+\\"/name\\",schemaPath:\\"#/properties/name/type\\",keyword:\\"type\\",params:{type: \\"string\\"},message:\\"must be string\\"}];return false;}var valid0 = _errs5 === errors;}else {var valid0 = true;}}}}}else {validate15.errors = [{instancePath,schemaPath:\\"#/type\\",keyword:\\"type\\",params:{type: \\"object\\"},message:\\"must be object\\"}];return false;}}validate15.errors = vErrors;return errors === 0;}
"
`;
