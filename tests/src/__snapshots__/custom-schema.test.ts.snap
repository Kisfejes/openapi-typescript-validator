// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`custom-schema - ajv compile decoders 1`] = `
"/* eslint-disable */

import Ajv from \\"ajv\\";

import { validateJson, Decoder } from \\"./helpers\\";
import { Screen, ImageComponent } from \\"./models\\";
import jsonSchema from \\"./schema.json\\";

const ajv = new Ajv({ strict: false });
ajv.compile(jsonSchema);

// Decoders
export const ScreenDecoder: Decoder<Screen> = {
  definitionName: \\"Screen\\",
  schemaRef: \\"#/definitions/Screen\\",

  decode(json: unknown): Screen {
    const schema = ajv.getSchema(ScreenDecoder.schemaRef);
    if (!schema) {
      throw new Error(\`Schema \${ScreenDecoder.definitionName} not found\`);
    }
    return validateJson(json, schema, ScreenDecoder.definitionName);
  },
};
export const ImageComponentDecoder: Decoder<ImageComponent> = {
  definitionName: \\"ImageComponent\\",
  schemaRef: \\"#/definitions/ImageComponent\\",

  decode(json: unknown): ImageComponent {
    const schema = ajv.getSchema(ImageComponentDecoder.schemaRef);
    if (!schema) {
      throw new Error(
        \`Schema \${ImageComponentDecoder.definitionName} not found\`
      );
    }
    return validateJson(json, schema, ImageComponentDecoder.definitionName);
  },
};
"
`;

exports[`custom-schema - ajv compile helpers.ts 1`] = `
"/* eslint-disable */
import type { ErrorObject } from \\"ajv\\";

export interface Decoder<T> {
  definitionName: string;
  schemaRef: string;
  decode: (json: unknown) => T;
}

export interface Validator {
  (json: unknown): boolean;
  errors?: ErrorObject[] | null;
}

export function validateJson(
  json: any,
  validator: Validator,
  definitionName: string
): any {
  const jsonObject = typeof json === \\"string\\" ? JSON.parse(json) : json;

  if (validator(jsonObject)) {
    return jsonObject;
  }

  const jsonPreviewStr = (typeof json === \\"string\\"
    ? json
    : JSON.stringify(jsonObject)
  ).substring(0, 200);
  if (validator.errors) {
    throw Error(
      \`\${definitionName} \${errorsText(
        validator.errors
      )}. JSON: \${jsonPreviewStr}\`
    );
  }

  throw Error(
    \`\${definitionName} Unexpected data received. JSON: \${jsonPreviewStr}\`
  );
}

function errorsText(errors: ErrorObject[]): string {
  return errors
    .map((error) => \`\${error.instancePath}: \${error.message}\`)
    .join(\\"\\\\n\\");
}
"
`;

exports[`custom-schema - ajv compile models should match 1`] = `
"/* eslint-disable */

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Component = TitleComponent | ImageComponent;

export interface Screen {
  components: Component[];
}
export interface TitleComponent {
  type: \\"title\\";
  title: string;
  subtitle?: string | null;
  meta: Meta;
}
export interface Meta {
  dateTime: string;
}
export interface ImageComponent {
  type: \\"image\\";
  url: string;
  meta: Meta;
}
"
`;

exports[`custom-schema - ajv compile schema should match 1`] = `
"{
  \\"type\\": \\"object\\",
  \\"title\\": \\"Schema\\",
  \\"definitions\\": {
    \\"Screen\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"components\\": {
          \\"type\\": \\"array\\",
          \\"items\\": {
            \\"$ref\\": \\"#/definitions/Component\\"
          }
        }
      },
      \\"required\\": [
        \\"components\\"
      ]
    },
    \\"Component\\": {
      \\"anyOf\\": [
        {
          \\"$ref\\": \\"#/definitions/TitleComponent\\"
        },
        {
          \\"$ref\\": \\"#/definitions/ImageComponent\\"
        }
      ]
    },
    \\"TitleComponent\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"type\\": {
          \\"type\\": \\"string\\",
          \\"enum\\": [
            \\"title\\"
          ]
        },
        \\"title\\": {
          \\"type\\": \\"string\\"
        },
        \\"subtitle\\": {
          \\"type\\": [
            \\"string\\",
            \\"null\\"
          ]
        },
        \\"meta\\": {
          \\"$ref\\": \\"#/definitions/Meta\\"
        }
      },
      \\"required\\": [
        \\"type\\",
        \\"title\\",
        \\"meta\\"
      ]
    },
    \\"ImageComponent\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"type\\": {
          \\"type\\": \\"string\\",
          \\"enum\\": [
            \\"image\\"
          ]
        },
        \\"url\\": {
          \\"type\\": \\"string\\"
        },
        \\"meta\\": {
          \\"$ref\\": \\"#/definitions/Meta\\"
        }
      },
      \\"required\\": [
        \\"type\\",
        \\"url\\",
        \\"meta\\"
      ]
    },
    \\"Meta\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"dateTime\\": {
          \\"type\\": \\"string\\"
        }
      },
      \\"required\\": [
        \\"dateTime\\"
      ]
    }
  },
  \\"properties\\": {
    \\"Screen\\": {
      \\"$ref\\": \\"#/definitions/Screen\\"
    },
    \\"Component\\": {
      \\"$ref\\": \\"#/definitions/Component\\"
    },
    \\"TitleComponent\\": {
      \\"$ref\\": \\"#/definitions/TitleComponent\\"
    },
    \\"ImageComponent\\": {
      \\"$ref\\": \\"#/definitions/ImageComponent\\"
    },
    \\"Meta\\": {
      \\"$ref\\": \\"#/definitions/Meta\\"
    }
  }
}"
`;

exports[`custom-schema - merged decoders 1`] = `
"/* eslint-disable */

import { validateJson, Validator, Decoder } from \\"./helpers\\";
import { Screen, ImageComponent } from \\"./models\\";
import { ScreenValidator, ImageComponentValidator } from \\"./validators\\";

export const ScreenDecoder: Decoder<Screen> = {
  definitionName: \\"Screen\\",
  schemaRef: \\"#/definitions/Screen\\",

  decode(json: unknown): Screen {
    return validateJson(
      json,
      ScreenValidator as Validator,
      ScreenDecoder.definitionName
    );
  },
};
export const ImageComponentDecoder: Decoder<ImageComponent> = {
  definitionName: \\"ImageComponent\\",
  schemaRef: \\"#/definitions/ImageComponent\\",

  decode(json: unknown): ImageComponent {
    return validateJson(
      json,
      ImageComponentValidator as Validator,
      ImageComponentDecoder.definitionName
    );
  },
};
"
`;

exports[`custom-schema - merged helpers.ts 1`] = `
"/* eslint-disable */
import type { ErrorObject } from \\"ajv\\";

export interface Decoder<T> {
  definitionName: string;
  schemaRef: string;
  decode: (json: unknown) => T;
}

export interface Validator {
  (json: unknown): boolean;
  errors?: ErrorObject[] | null;
}

export function validateJson(
  json: any,
  validator: Validator,
  definitionName: string
): any {
  const jsonObject = typeof json === \\"string\\" ? JSON.parse(json) : json;

  if (validator(jsonObject)) {
    return jsonObject;
  }

  const jsonPreviewStr = (typeof json === \\"string\\"
    ? json
    : JSON.stringify(jsonObject)
  ).substring(0, 200);
  if (validator.errors) {
    throw Error(
      \`\${definitionName} \${errorsText(
        validator.errors
      )}. JSON: \${jsonPreviewStr}\`
    );
  }

  throw Error(
    \`\${definitionName} Unexpected data received. JSON: \${jsonPreviewStr}\`
  );
}

function errorsText(errors: ErrorObject[]): string {
  return errors
    .map((error) => \`\${error.instancePath}: \${error.message}\`)
    .join(\\"\\\\n\\");
}
"
`;

exports[`custom-schema - merged models should match 1`] = `
"/* eslint-disable */

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Component = TitleComponent | ImageComponent;

export interface Screen {
  components: Component[];
}
export interface TitleComponent {
  type: \\"title\\";
  title: string;
  subtitle?: string | null;
  meta: Meta;
}
export interface Meta {
  dateTime: string;
}
export interface ImageComponent {
  type: \\"image\\";
  url: string;
  meta: Meta;
}
"
`;

exports[`custom-schema - merged schema should match 1`] = `
"{
  \\"type\\": \\"object\\",
  \\"title\\": \\"Schema\\",
  \\"definitions\\": {
    \\"Screen\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"components\\": {
          \\"type\\": \\"array\\",
          \\"items\\": {
            \\"$ref\\": \\"#/definitions/Component\\"
          }
        }
      },
      \\"required\\": [
        \\"components\\"
      ]
    },
    \\"Component\\": {
      \\"anyOf\\": [
        {
          \\"$ref\\": \\"#/definitions/TitleComponent\\"
        },
        {
          \\"$ref\\": \\"#/definitions/ImageComponent\\"
        }
      ]
    },
    \\"TitleComponent\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"type\\": {
          \\"type\\": \\"string\\",
          \\"enum\\": [
            \\"title\\"
          ]
        },
        \\"title\\": {
          \\"type\\": \\"string\\"
        },
        \\"subtitle\\": {
          \\"type\\": [
            \\"string\\",
            \\"null\\"
          ]
        },
        \\"meta\\": {
          \\"$ref\\": \\"#/definitions/Meta\\"
        }
      },
      \\"required\\": [
        \\"type\\",
        \\"title\\",
        \\"meta\\"
      ]
    },
    \\"ImageComponent\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"type\\": {
          \\"type\\": \\"string\\",
          \\"enum\\": [
            \\"image\\"
          ]
        },
        \\"url\\": {
          \\"type\\": \\"string\\"
        },
        \\"meta\\": {
          \\"$ref\\": \\"#/definitions/Meta\\"
        }
      },
      \\"required\\": [
        \\"type\\",
        \\"url\\",
        \\"meta\\"
      ]
    },
    \\"Meta\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"dateTime\\": {
          \\"type\\": \\"string\\"
        }
      },
      \\"required\\": [
        \\"dateTime\\"
      ]
    }
  },
  \\"properties\\": {
    \\"Screen\\": {
      \\"$ref\\": \\"#/definitions/Screen\\"
    },
    \\"Component\\": {
      \\"$ref\\": \\"#/definitions/Component\\"
    },
    \\"TitleComponent\\": {
      \\"$ref\\": \\"#/definitions/TitleComponent\\"
    },
    \\"ImageComponent\\": {
      \\"$ref\\": \\"#/definitions/ImageComponent\\"
    },
    \\"Meta\\": {
      \\"$ref\\": \\"#/definitions/Meta\\"
    }
  }
}"
`;

exports[`custom-schema - merged validators.d.ts 1`] = `
"export function ScreenValidator(json: unknown): boolean;
export function ImageComponentValidator(json: unknown): boolean;
"
`;

exports[`custom-schema decoders index.ts 1`] = `
"/* eslint-disable */

export { ScreenDecoder } from \\"./Screen/decoder\\";
export { ImageComponentDecoder } from \\"./ImageComponent/decoder\\";
"
`;

exports[`custom-schema models should match 1`] = `
"/* eslint-disable */

/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Component = TitleComponent | ImageComponent;

export interface Screen {
  components: Component[];
}
export interface TitleComponent {
  type: \\"title\\";
  title: string;
  subtitle?: string | null;
  meta: Meta;
}
export interface Meta {
  dateTime: string;
}
export interface ImageComponent {
  type: \\"image\\";
  url: string;
  meta: Meta;
}
"
`;

exports[`custom-schema schema should match 1`] = `
"{
  \\"type\\": \\"object\\",
  \\"title\\": \\"Schema\\",
  \\"definitions\\": {
    \\"Screen\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"components\\": {
          \\"type\\": \\"array\\",
          \\"items\\": {
            \\"$ref\\": \\"#/definitions/Component\\"
          }
        }
      },
      \\"required\\": [
        \\"components\\"
      ]
    },
    \\"Component\\": {
      \\"anyOf\\": [
        {
          \\"$ref\\": \\"#/definitions/TitleComponent\\"
        },
        {
          \\"$ref\\": \\"#/definitions/ImageComponent\\"
        }
      ]
    },
    \\"TitleComponent\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"type\\": {
          \\"type\\": \\"string\\",
          \\"enum\\": [
            \\"title\\"
          ]
        },
        \\"title\\": {
          \\"type\\": \\"string\\"
        },
        \\"subtitle\\": {
          \\"type\\": [
            \\"string\\",
            \\"null\\"
          ]
        },
        \\"meta\\": {
          \\"$ref\\": \\"#/definitions/Meta\\"
        }
      },
      \\"required\\": [
        \\"type\\",
        \\"title\\",
        \\"meta\\"
      ]
    },
    \\"ImageComponent\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"type\\": {
          \\"type\\": \\"string\\",
          \\"enum\\": [
            \\"image\\"
          ]
        },
        \\"url\\": {
          \\"type\\": \\"string\\"
        },
        \\"meta\\": {
          \\"$ref\\": \\"#/definitions/Meta\\"
        }
      },
      \\"required\\": [
        \\"type\\",
        \\"url\\",
        \\"meta\\"
      ]
    },
    \\"Meta\\": {
      \\"type\\": \\"object\\",
      \\"properties\\": {
        \\"dateTime\\": {
          \\"type\\": \\"string\\"
        }
      },
      \\"required\\": [
        \\"dateTime\\"
      ]
    }
  },
  \\"properties\\": {
    \\"Screen\\": {
      \\"$ref\\": \\"#/definitions/Screen\\"
    },
    \\"Component\\": {
      \\"$ref\\": \\"#/definitions/Component\\"
    },
    \\"TitleComponent\\": {
      \\"$ref\\": \\"#/definitions/TitleComponent\\"
    },
    \\"ImageComponent\\": {
      \\"$ref\\": \\"#/definitions/ImageComponent\\"
    },
    \\"Meta\\": {
      \\"$ref\\": \\"#/definitions/Meta\\"
    }
  }
}"
`;
